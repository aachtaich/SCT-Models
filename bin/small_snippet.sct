stateMachine smallSnippet

Boolean LGS
Boolean Pilot_Interface
Boolean Param Enum Handle [0..3]  //0=untouched, 1="up", 2="down", 3=locked
Integer Enum Light[1,3] [0..3] // 0=NotinConf, 1="red", 2="green", 3="orange"
Integer Enum Handle_Sensor [1,3] [0..2] // 0=NotinConf 1="up", 2="down"

LGS=1
LGS=Pilot_Interface
Pilot_Interface=1
Pilot_Interface>0 -> Handle >0 /\ (Light[1]>1 /\ Light[2]>1 /\ Light[3]>1)

//General constraints
compositeState LGS_Nominal
	concernLevel handle
		/*A*/simpleConstraintState handle_up
			//OUT_Handle=1
			Handle_Sensor [ 1 ]=1 /\ Handle_Sensor [ 2 ]=1 /\ Handle_Sensor [ 3]=1
			Light [ 1 ]=1 /\ Light [ 2 ]=1 /\ Light [ 3]=1
		simpleConstraintState handle_down
			//OUT_Handle=2
			Handle_Sensor [ 1 ]=2 /\ Handle_Sensor [ 2 ]=2 /\ Handle_Sensor [ 3 ]=2
			Light [ 1 ]=2 /\ Light [ 2 ]=2 /\ Light [ 3]=2
		simpleConstraintState handle_inactive
			Handle_Sensor [ 1 ]=0 /\ Handle_Sensor [ 2 ]=0 /\ Handle_Sensor [ 3 ]=0 
			Light [ 1 ] + Light [ 2 ] + Light [ 3]=0	
	end_concernLevel handle		
	
end_compositeState LGS_Nominal


Start transition to LGS_Nominal
Start transition to LGS_Nominal.handle.handle_up

//Transitions on the handle
When LGS_Nominal if Handle=1 transition from LGS_Nominal.handle.handle_down to LGS_Nominal.handle.handle_up
When LGS_Nominal if Handle=2 transition from LGS_Nominal.handle.handle_up to LGS_Nominal.handle.handle_down
When LGS_Nominal if Handle=0 transition from LGS_Nominal.handle.handle_down to LGS_Nominal.handle.handle_inactive
When LGS_Nominal if Handle=0 transition from LGS_Nominal.handle.handle_up to LGS_Nominal.handle.handle_inactive


//